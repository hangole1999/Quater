
var port = '8885';
var serverIP = 'www.quater.zz.am';

var myPos;
var pos = [];
var names = [];
var shapes = [];
var area = { width: 40, height:40 };

var canvas = document.getElementById ( "myCanvas" );
var context = canvas.getContext ( "2d" );

var inputText = document.getElementById ( "message" );
var inputNameText = document.getElementById ( "name" );
var divArea = document.getElementById ( "divArea" );
var playersInfo = document.getElementById ( "playersInfo" );
var noticeCheckBox = document.getElementById ( "noticeCheckBox" );
var mouseCheckBox = document.getElementById ( "mouseCheckBox" );
var shapeCheckBox = document.getElementById ( "shapeCheckBox" );
var prograssbar = document.getElementById ( "prograssbar" );

var callName = document.getElementById ( "callName" );

var handle = document.getElementById ( "handle" );

var isStarted = false;
var stayTime = 0;

var mouse = { x: 0, y: 0, isClick: false };
var sendMouseAddPos = { x: 0, y: 0 };

var chatHistory = [];

var keypress = {}

var browserInfo = navigator.userAgent.toLowerCase();
var browser;

if ( /*@cc_on true || @*/ false ) 
	browser = 0;
else if ( browserInfo.indexOf ( 'msie 6' ) != -1 ) 
	browser = 1;
else if ( browserInfo.indexOf ( 'msie 7' ) != -1 ) 
	browser = 2;
else if ( browserInfo.indexOf ( 'msie 8' ) != -1 ) 
	browser = 3;
else if ( !!window.opera ) 
	browser = 4;
else if ( browserInfo.indexOf ( 'mac' ) != -1 ) 
	browser = 5;
else if ( browserInfo.indexOf ( 'firefox' ) != -1 ) 
	browser = 6;
else if ( browserInfo.indexOf ( 'safari' ) != -1 || browserInfo.indexOf ( 'applewebkit/5' ) != -1 || browserInfo.indexOf ( 'chrome' ) != -1 ) 
	browser = 7;
else 
	browser = 8;

//canvas.style.width = '100%';
//canvas.style.height = '100%';

canvas.width = canvas.offsetWidth;
canvas.height = canvas.offsetHeight;

//canvas.width = canvas.parentElement.width;
//canvas.height = canvas.parentElement.height;

context.clearRect( 0, 0, canvas.width, canvas.height );
context.textAlign = 'center';

// Socket
var socket;

try {

	socket = io.connect('http://' + serverIP + ':' + port + '/');

} catch ( e ) {

	prograssbar.remove ();

	context.fillStyle = "black";
	context.fillRect ( 0, 0, canvas.width, canvas.height );

	playersInfo.innerText = '';

	divArea.innerText = 'Connect fail. Reason is Server closed or Network problem.';
	socket.disconnect('unauthorized');

	location.src = '/home';

}

socket.emit ( 'nameChange', { value: callName } );

function sendPress () {

        if ( inputText.value == "" )
                return;
	else if ( inputText.value == "--help" ) {
		if ( browser === 7 )
			divArea.innerText += "\r\n\r\n --help : Show help message.\r\n --clear : Clear chatting box.\r\n";
		else 
			divArea.textContent += "\r\n\r\n --help : Show help message.\r\n --clear : Clear chatting box.\r\n";
		inputText.value = '';
		return;
	} else if ( inputText.value == "--clear" ) {
		if ( browser === 7 )
			divArea.innerText = "";
		else 
			divArea.textContent = "";
		inputText.value = '';
		return;
	}

	chatHistory.push ( inputText.value );

	if ( chatHistory.length > 10 )
		chatHistory.splice ( 10, 1 );

        socket.emit ( 'chat', { value: inputText.value } );
	inputText.value = '';

}

function changePress () {
        
        if ( inputNameText.value == "" )
                return;

        socket.emit ( 'nameChange', { value: inputNameText.value } );
	inputNameText.value = '';

}

function inputAreaInput () {

	document.onkeypress = function(e) {

		if ( typeof ( e ) != undefined ) {

			if ( (e.keyCode == 0 ? e.charCode : e.keyCode) == 13 )
				sendPress ();
			else if ( (e.keyCode == 0 ? e.charCode : e.keyCode) == 38 && chatHistory.length > 0 ) {
				inputText.value = chatHistory.pop ();
			}

		} else {

			if (window.event.keyCode == 13)
				sendPress ();
			else if ( window.event.keyCode == 38 && chatHistory.length > 0 ) {
				inputText.value = chatHistory.pop ();
			}

		}

	}

}

function inputNameAreaInput () {

	document.onkeypress = function(e) {

		if ( typeof ( e ) != undefined ) {

			if ( (e.keyCode == 0 ? e.charCode : e.keyCode) == 13 )
				changePress ();

		} else {

			if ( window.event.keyCode == 13 )
				changePress ();

		}

	}
        
}

function transShape () {

	socket.emit ( 'transShape', { shape: shapeCheckBox.checked } );

}

function keydownCanvas () {

	handle.value = '';

	document.onkeydown = function(e) {

		if ( typeof ( e ) != undefined ) {

			keypress [(e.keyCode == 0 ? e.charCode : e.keyCode)] = true;

		} else {

			keypress [window.event.keyCode] = true;

		}

	}

}

function keyupCanvas () {

	handle.value = '';

	document.onkeyup = function(e) {

		if ( typeof ( e ) != undefined ) {

			keypress [(e.keyCode == 0 ? e.charCode : e.keyCode)] = false;

		} else {

			keypress [window.event.keyCode] = false;

		}

	}

}

socket.on ( 'chat', function ( data ) {
        
	if ( browser === 7 )
		divArea.innerText += "\r\n" + data.info.name + ' : ' + data.info.value;
	else 
		divArea.textContent = divArea.textContent + "\r\n" + data.info.name + ' : ' + data.info.value;
	divArea.scrollTop = divArea.scrollHeight;

	if ( noticeCheckBox.checked && ( data.info.name == 'SERVER' || data.info.name == 'server' || data.info.name == '김기황' || data.info.name == 'hangole' ) ) {

		 Materialize.toast(data.info.value, 4000, 'rounded');

	}
        
} );

socket.on ( 'names', function ( data ) {

	names = data.info.names;
        
	if ( browser === 7 )
		playersInfo.innerText = '';
	else 
		playersInfo.textContent = '';
        
        for ( var i = 0; i < data.info.names.length; i++ ) {

		if ( browser === 7 )
			playersInfo.innerText += data.info.names[i] + '\r\n ';
		else 
			playersInfo.textContent = playersInfo.textContent + data.info.names[i] + '\r\n ';
                
        }
        
} );

socket.emit('get');

socket.on ( 'currentPos', function (data) {

	if ( !isStarted ) {
		prograssbar.remove ();
		isStarted = true;
	}
	
	//console.log(data);

	pos = data.info.pos;

	shapes = data.info.shapes;

	context.clearRect ( 0, 0, canvas.width, canvas.height );

	for ( var i = 0; i < pos.length; i++ ) {

		if ( i == data.index )
			context.fillStyle = "cyan";
		else
			context.fillStyle = 'black';

		context.beginPath ();

		if ( !shapes[i] )
			context.rect ( pos[i].x - area.width/2, pos[i].y - area.height/2, area.width, area.height );
		else
			context.arc ( pos[i].x, pos[i].y, area.width / 2, 0, 360 );

		context.stroke();
		context.closePath ();

		context.fillStyle = "black";

		context.fillText ( names[i], pos[i].x, pos[i].y, area.width, area.height );

	}

	myPos = pos[data.index];

} );

socket.on ( 'kick', function ( data ) {

	context.fillStyle = "black";
	context.fillRect ( 0, 0, canvas.width, canvas.height );
        
        playersInfo.innerText = '';

	divArea.innerText = data.msg;
	socket.disconnect('unauthorized');

	location.src = '/home';
        
} );

moving = function ( pos ) {

	socket.emit('move', {x: pos.x, y: pos.y});

}

canvas.addEventListener ( 'mousedown', function ( e ) {

	mouse.isClick = true;

	mouse.x = e.x;
	mouse.y = e.y;

} );

canvas.addEventListener ( 'mouseup', function ( e ) {

	mouse.isClick = false;

	mouse.x = e.x;
	mouse.y = e.y;

} );

canvas.addEventListener ( 'mousemove', function ( e ) {

	if ( mouseCheckBox.checked && mouse.isClick ) {

		mouse.x = e.x;
		mouse.y = e.y;

	}

} );

$(function(){

	var $p2 = $('#p2');

	setInterval( function(){

		if ( !isStarted )
			if ( stayTime > 10000 ) {

				prograssbar.remove ();

				context.fillStyle = "black";
				context.fillRect ( 0, 0, canvas.width, canvas.height );
		
				playersInfo.innerText = '';

				divArea.innerText = 'Connect fail. Reason is Server close or server baned you or connect overlab.';
				socket.disconnect('unauthorized');

				location.src = '/home';

			} else 
				stayTime += 100;
	
		if ( keypress['37'] || ( mouseCheckBox.checked && mouse.isClick && (myPos.x + 145) - 10 > mouse.x ) ) sendMouseAddPos.x = -1;
		else if ( keypress['39'] || ( mouseCheckBox.checked && mouse.isClick && (myPos.x + 145) + 10 < mouse.x ) ) sendMouseAddPos.x = 1;
		else sendMouseAddPos.x = 0;
		
		if ( keypress['38'] || ( mouseCheckBox.checked && mouse.isClick && (myPos.y + 22) - 10 > mouse.y ) ) sendMouseAddPos.y = -1;
		else if ( keypress['40'] || ( mouseCheckBox.checked && mouse.isClick && (myPos.y + 22) + 10 < mouse.y ) ) sendMouseAddPos.y = 1;
		else sendMouseAddPos.y = 0;

		sendMouseAddPos.x = Math.abs ( sendMouseAddPos.x ) / sendMouseAddPos.x * 3;
		sendMouseAddPos.y = Math.abs ( sendMouseAddPos.y ) / sendMouseAddPos.y * 3;

		if ( keypress['32'] ){
		    sendMouseAddPos.x = Math.abs ( sendMouseAddPos.x ) / sendMouseAddPos.x * 6;
		    sendMouseAddPos.y = Math.abs ( sendMouseAddPos.y ) / sendMouseAddPos.y * 6;
		}

		if ( sendMouseAddPos.y != 0 || sendMouseAddPos.x != 0 )
			moving ( { x: sendMouseAddPos.x, y: sendMouseAddPos.y } );

	}, 25 );
});
